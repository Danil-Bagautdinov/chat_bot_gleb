import bs4 as bs4
import requests
import pyowm
import pymorphy2


morph = pymorphy2.MorphAnalyzer()


class VkBot:

    def __init__(self, user_id):
        print("\n–°–æ–∑–¥–∞–Ω –±–æ—Ç!")

        self._USER_ID = user_id
        self._USERNAME = self._get_user_name_from_vk_id(user_id)

        self._COMMANDS = ["–ü–†–ò–í–ï–¢", "–ü–û–ì–û–î–ê", "–í–†–ï–ú–Ø", "–ö–ê–ö –î–ï–õ–ê?", "–ü–û–ö–ê", "–¢–´ –î–£–†–ê–ö", "–ó–î–†–ê–°–¢–ï",
                          "–í–´–ü–¨–ï–ú", "–ü–†–ò–í–ï–¢ –ê–õ–ò–°–ê",
                          "–ê–†–¢–£–† –°–ê–î–´–ö–û–í", "–°–ê–î–´–ö–û–í –ê–†–¢–£–†", "–ë–ê–ì–ê–£–¢–î–ò–ù–û–í –î–ê–ù–ò–õ", "–î–ê–ù–ò–õ –ë–ê–ì–ê–£–¢–î–ò–ù–û–í"]

    def _get_user_name_from_vk_id(self, user_id):
        request = requests.get("https://vk.com/id" + str(user_id))
        bs = bs4.BeautifulSoup(request.text, "html.parser")

        user_name = self._clean_all_tag_from_str(bs.findAll("title")[0])

        return user_name.split()[0]

    def new_message(self, message):

        # –ü—Ä–∏–≤–µ—Ç
        if message.upper() == self._COMMANDS[0]:
            return f"–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {self._USERNAME}!"
        # –ü–æ–≥–æ–¥–∞
        elif self._COMMANDS[1] in message.upper():
                # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                city_name = message.split()
                # –°–∫–ª–æ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
                return self._get_weather(morph.parse(city_name[2])[0].inflect(
                    {'sing', 'nomn'}).word.title())
        # –í—Ä–µ–º—è
        elif message.upper() == self._COMMANDS[2]:
            return self._get_time()
        # –ö–∞–∫ –¥–µ–ª–∞?
        elif message.upper() == self._COMMANDS[3]:
            return f"–í—Å–µ –Ω–æ—Ä–º, {self._USERNAME}!"

        # –ü–æ–∫–∞
        elif message.upper() == self._COMMANDS[4]:
            return f"–ü–æ–∫–∞, {self._USERNAME}!"

        # –û–±—â–µ–Ω–∏–µ
        elif message.upper() == self._COMMANDS[5]:
            return f"–ö—Ç–æ –æ–±–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–æ—Ç —Å–∞–º —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è!"

        elif message.upper() == self._COMMANDS[6]:
            return f"–ó–¥–∞—Ä–æ–≤–∞, {self._USERNAME}!"

        elif message.upper() == self._COMMANDS[7]:
            return "–Ø –Ω–µ –ø—å—é!"

        elif message.upper() == self._COMMANDS[8]:
            return "–Ø –ì–õ–ï–ë!"

        elif message.upper() == self._COMMANDS[9]:
            return f"–û—Ö, {self._USERNAME}, —è —Å –Ω–∏–º –æ—á–µ–Ω —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º. –û–Ω –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å!"

        elif message.upper() == self._COMMANDS[10]:
            return f"–û—Ö, {self._USERNAME}, —è —Å –Ω–∏–º –æ—á–µ–Ω —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–∫–æ–º. –û–Ω –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å!"

        elif message.upper() == self._COMMANDS[11]:
            return f"–û–ª—è–ª—è, {self._USERNAME}, –≤—ã —Å –Ω–∏–º –∑–Ω–∞–∫–æ–º—ã? –û–Ω –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å!"

        elif message.upper() == self._COMMANDS[12]:
            return f"–û–ª—è–ª—è, {self._USERNAME}, –≤—ã —Å –Ω–∏–º –∑–Ω–∞–∫–æ–º—ã? –û–Ω –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å!"
        else:
            return "–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º –≤—ã"

    # –í—Ä–µ–º—è
    def _get_time(self):
        request = requests.get("https://my-calend.ru/date-and-time-today")
        b = bs4.BeautifulSoup(request.text, "html.parser")
        return self._clean_all_tag_from_str(str(b.select(".page")[0].findAll("h2")[1])).split()[1]

    @staticmethod
    def _clean_all_tag_from_str(string_line):
        result = ""
        not_skip = True
        for i in list(string_line):
            if not_skip:
                if i == "<":
                    not_skip = False
                else:
                    result += i
            else:
                if i == ">":
                    not_skip = True
        return result

    # –ü–æ–≥–æ–¥–∞
    @staticmethod
    def _get_weather(city_name):

        # API - –∫–ª—é—á —Å–∞–π—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –ø–æ–≥–æ–¥—ã
        owm = pyowm.OWM('cd663094c13260b015bc50ecf134be54')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
        observation = owm.weather_at_place(f'{city_name},RU')
        weather = observation.get_weather()
        weather_stat = weather.get_status()
        pressure = weather.get_pressure()['press']
        wind_speed = weather.get_wind()['speed']
        wind_direction = weather.get_wind()['deg']

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞
        if wind_direction == 0 or wind_direction == 360:
            wind_direction_word = '–°'
        elif wind_direction in range(1, 90):
            wind_direction_word = '–°-–í'
        elif wind_direction == 90:
            wind_direction_word = '–í'
        elif wind_direction in range(91, 180):
            wind_direction_word = '–Æ-–í'
        elif wind_direction == 180:
            wind_direction_word = '–Æ'
        elif wind_direction in range(181, 270):
            wind_direction_word = '–Æ-–ó'
        elif wind_direction == 270:
            wind_direction_word = '–ó'
        elif wind_direction in range(271, 360):
            wind_direction_word = '–°-–ó'

        # –ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–≥–æ–¥—ã
        temperature = weather.get_temperature('celsius')['temp']
        if weather_stat == 'Clouds':
            weather_status = '–û–±–ª–∞—á–Ω–æ ‚òÅ'
        elif weather_stat == 'Rain':
            weather_status = '–î–æ–∂–¥—å üåß'
        elif weather_stat == 'Snow':
            weather_status = '–°–Ω–µ–≥ üå®'
        else:
            weather_status = '–°–æ–ª–Ω–µ—á–Ω–æ ‚òÄ'

        # –ò, –Ω–∞–∫–æ–Ω–µ—Ü, —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–µ–¥–∏–Ω–æ
        return ('–î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å üîÆ' '\n' f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} {temperature}‚ÑÉ.'
                '\n' f'–°—Ç–∞—Ç—É—Å: {weather_status}' '\n' f'–î–∞–≤–ª–µ–Ω–∏–µ üå°: {pressure} –º–º.—Ä—Ç.—Å—Ç.' '\n'
                f'–í–µ—Ç–µ—Ä üí®: {wind_direction_word}, {wind_speed} –º/—Å')
